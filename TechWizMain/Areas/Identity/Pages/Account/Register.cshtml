@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post" onclick="return validateInput()">
            <h2>Create a new account.</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating">
                <input asp-for="Input.FullName" class="form-control" aria-required="true" />
                <label asp-for="Input.FullName"></label>
                <span asp-validation-for="Input.FullName" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.UserName" class="form-control" aria-required="true" id="userName"/>
                <label asp-for="Input.UserName"></label>
                <span asp-validation-for="Input.UserName" class="text-danger" id="userErr"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.PhoneNumber" class="form-control" aria-required="true" id="phone" onblur="return validatePhone()"/>
                <label asp-for="Input.PhoneNumber"></label>
                <span asp-validation-for="Input.PhoneNumber" class="text-danger" id="phoneErr"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.DateOfBirth" class="form-control" aria-required="true" id="DoB"/>
                <label asp-for="Input.DateOfBirth"></label>
                <span asp-validation-for="Input.DateOfBirth" class="text-danger" id="DoBErr"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                <label asp-for="Input.Email"></label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" />
                <label asp-for="Input.Password"></label>
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" />
                <label asp-for="Input.ConfirmPassword"></label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </form>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
                            about setting up this ASP.NET application to support logging in via external services</a>.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins!)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function validateInput() {
            const userNameval = document.getElementById("userName").value;
            var dobInput = document.getElementById("DoB").value.trim();
            var dob = new Date(dobInput);

            //calculate month difference from current date in time
            var month_diff = Date.now() - dob.getTime();

            //convert the calculated difference in date format
            var age_dt = new Date(month_diff);

            //extract year from date
            var year = age_dt.getUTCFullYear();

            //now calculate the age of the user
            var age = Math.abs(year - 1970);
            valid = true;

            if (!validateUsername(userNameval)) {
                document.getElementById("userErr").innerHTML = "User name cannot contain white space";
                valid = false;
            }

            if (age <= 18) {
                document.getElementById("DoBErr").innerHTML = "Age must not be below 18 years old";
                valid = false;
            } else if (age >= 80) {
                document.getElementById("DoBErr").innerHTML = "Age must not be greater than 80 years old";
                valid = false;
            }
            return valid;
        }

        function validatePhone() {
            const phoneVal = document.getElementById("phone").value;
            if (!isValidNumber(phoneVal)) {
                document.getElementById("phoneErr").innerHTML = "Please enter valid phone number which is max 13 and min 10 digits include 0 at start";
            }
        }
        
        function validateUsername(username) {
            // Regular expression to match any whitespace character
            var regex = /\s/;

            // Test if the username contains any whitespace
            if (regex.test(username)) {
                return false; // Username contains whitespace
            }

            return true; // Username is valid
        }
        //Valid number will match phone numbers that start with 0, have between 9 and 12 digits, and do not contain any digit that repeats more than 8 times in a row.
        function isValidNumber(number) {
            const pattern = /^0(?!.*(\d)\1{8})\d{9,12}$/;
            return pattern.test(number);
        }
    </script>
}